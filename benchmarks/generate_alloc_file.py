#!/usr/bin/python3


def get_str(file_name):
    '''
    Get the contents of the given file and return a string representation
    of it.
    '''
    str = ''
    with open(file_name) as f:
        for line in f:
            str += line
    return str


def get_structs_and_allocs():
    '''
    Generates stub code that will be used to create .cpp files which are later
    compiled and run as benchmarks.
    '''
    struct_t = get_str('sample_struct.txt')
    new_t = get_str('sample_new.txt')
    alloc_t = get_str('sample_alloc.txt')
    structs = {'new': [], 'no_new': []}
    allocs = ''
    half_gig = 536870900
    for i in range(3, 11):
        size = int(2**i)
        new = new_t.format(name=size)
        structs['new'].append(struct_t.format(name=size, size=size//4,
                                              op_new=new))
        structs['no_new'].append(struct_t.format(name=size, size=size//4,
                                                 op_new=''))
        allocs += (alloc_t.format(name=size, allocs=half_gig//size)) + '\n'
    return structs, allocs


def gen_files():
    '''
    Generate 9 .cpp files which can be compiled and run as benchmarks.
    '''
    files_created = []
    main_t = get_str('sample_main.txt')
    structs, allocs = get_structs_and_allocs()
    files = 1
    for i in range(9):
        struct_str = ''
        for j in range(8):
            if j < i:
                struct_str += structs['new'][j] + '\n'
            else:
                struct_str += structs['no_new'][j] + '\n'
        main = main_t.format(structs=struct_str, allocs=allocs)
        file = 'alloc_benchmark_%d.cpp' % (files)
        files_created.append(file)
        with open(file, 'w') as f:
            f.write(main)
        files += 1
    return files_created


def add_to_cmake(files):
    '''
    Appends the neccessary CMake commands to the CMakeLists.txt file of this
    folder.

    These commands will generate allocation benchmarks based on the given
    files next time "make" is called.
    '''
    gen_str = '# generated by "generate_alloc_file.py"'
    with open('CMakeLists.txt', 'a+') as f:
        f.seek(0)
        skip_append = False
        for line in f:
            if gen_str in line:
                skip_append = True
                break
        if not skip_append:
            f.write('\n{}\n'.format(gen_str))
            for file in files:
                f.write('add_executable({} {})\n'.format(file.split('.')[0],
                                                         file))
                link_libs = 'target_link_libraries({} linkedpools)\n'
                link_libs = link_libs.format(file.split('.')[0])
                f.write(link_libs)


if __name__ == "__main__":
    files = gen_files()
    add_to_cmake(files)
